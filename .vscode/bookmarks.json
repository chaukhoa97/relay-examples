{
	"files": [
		{
			"path": "newsfeed/src/components/Newsfeed.tsx",
			"bookmarks": [
				{
					"line": 6,
					"column": 37,
					"label": "// 1.1. Basic Flow: Declare the query"
				},
				{
					"line": 17,
					"column": 37,
					"label": "// 1.2. Basic Flow: Query the data with `useLazyLoadQuery`"
				},
				{
					"line": 23,
					"column": 37,
					"label": "// 1.3. Basic Flow: As we declared StoryFragment in the query, we know that what contains the StoryFragment - `topStories` has all the information (NOT DATA) we need..."
				}
			]
		},
		{
			"path": "newsfeed/src/components/Story.tsx",
			"bookmarks": [
				{
					"line": 12,
					"column": 63,
					"label": "// 1.6. Basic Flow: We specify the data requirements of a component via `fragment`"
				},
				{
					"line": 30,
					"column": 63,
					"label": "// 1.5. Basic Flow: We can declare the type of that `story` as the generated `StoryFragment$key`"
				},
				{
					"line": 32,
					"column": 63,
					"label": "// 1.4. Basic Flow: ...to extract the data with `usefragment`"
				},
				{
					"line": 42,
					"column": 79,
					"label": "{/* 1.3b. Basic Flow: As we declared StoryCommentsSectionFragment in the Fragment, we know that what is extracted from `useFragment` - `data` has all the information (NOT DATA) we need... */}"
				}
			]
		},
		{
			"path": "newsfeed/src/components/PosterDetailsHovercardContents.tsx",
			"bookmarks": [
				{
					"line": 15,
					"column": 25,
					"label": "inline `fragment` - `type` refinement"
				},
				{
					"line": 45,
					"column": 16,
					"label": "Query when component mount: Similar to common query, just fetch with `useLazyLoadQuery` and extract with `useFragment` "
				}
			]
		},
		{
			"path": "newsfeed/src/components/StoryCommentsSection.tsx",
			"bookmarks": [
				{
					"line": 19,
					"column": 6,
					"label": "2.4. Mutation Connection: Need a `key` for new nodes"
				}
			]
		},
		{
			"path": "newsfeed/src/components/StoryLikeButton.tsx",
			"bookmarks": [
				{
					"line": 13,
					"column": 44,
					"label": "2.1. Mutation: Declare the GraphQL mutation"
				},
				{
					"line": 31,
					"column": 2,
					"label": "2.2. Mutation: `commit` the change from `useMutation`"
				},
				{
					"line": 47,
					"column": 27,
					"label": "2.3. Mutation: Disable the button while the mutation is happening"
				}
			]
		},
		{
			"path": "newsfeed/src/components/StoryCommentsComposer.tsx",
			"bookmarks": [
				{
					"line": 21,
					"column": 4,
					"label": "2.5. Mutation Connection: Use `@appendEge/ @prependEge/ @deleteEdge` to specify where should the new mutation goes"
				},
				{
					"line": 46,
					"column": 59,
					"label": "2.6. Mutation Connection: Get the connectionID from the `key`"
				},
				{
					"line": 55,
					"column": 36,
					"label": "2.7. Mutation Connection: And use it in the commit"
				}
			]
		}
	]
}